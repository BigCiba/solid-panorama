// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`events_macro useGameEvent 1`] = `
""use strict";

var _solidJs = require("solid-js");
function Item() {
  let [enabled] = createSignal(false);
  (0, _solidJs.createEffect)(() => {
    const id = GameEvents.Subscribe("custom_event", data => {
      console.log('Item', enabled());
    });
    (0, _solidJs.onCleanup)(() => {
      GameEvents.Unsubscribe(id);
    });
  }, enabled());
}
function App() {
  (0, _solidJs.createEffect)(() => {
    const id = GameEvents.Subscribe("custom_event", data => {
      console.log(data);
    });
    (0, _solidJs.onCleanup)(() => {
      GameEvents.Unsubscribe(id);
    });
  });
}"
`;

exports[`events_macro useNetTable 1`] = `
""use strict";

var _solidJs = require("solid-js");
function Item() {
  const [A, _setA] = (0, _solidJs.createSignal)(CustomNetTables.GetTableValue("table_a", "key_of_one"));
  const [B, _setB] = (0, _solidJs.createSignal)(CustomNetTables.GetTableValue("table_b", "key_of_two"));
  const [BB, _setBB] = (0, _solidJs.createSignal)(CustomNetTables.GetTableValue("table_b", "key_of_bb"));
  (0, _solidJs.createEffect)(() => {
    const id = CustomNetTables.SubscribeNetTableListener("table_a", function (_, k, v) {
      if (k === "key_of_one") {
        _setA(v);
      }
    });
    (0, _solidJs.onCleanup)(() => {
      CustomNetTables.UnsubscribeNetTableListener(id);
    });
  });
  (0, _solidJs.createEffect)(() => {
    const id = CustomNetTables.SubscribeNetTableListener("table_b", function (_, k, v) {
      if (k === "key_of_two") {
        _setB(v);
      } else if (k === "key_of_bb") {
        _setBB(v);
      }
    });
    (0, _solidJs.onCleanup)(() => {
      CustomNetTables.UnsubscribeNetTableListener(id);
    });
  });
}
function App() {
  const [one, _setOne] = (0, _solidJs.createSignal)(CustomNetTables.GetTableValue("table_name", "key_of_one"));
  const [two, _setTwo] = (0, _solidJs.createSignal)(CustomNetTables.GetTableValue("table_name", "key_of_two"));
  const [three, _setThree] = (0, _solidJs.createSignal)(CustomNetTables.GetTableValue("table_name", "key_of_three"));
  (0, _solidJs.createEffect)(() => {
    const id = CustomNetTables.SubscribeNetTableListener("table_name", function (_, k, v) {
      if (k === "key_of_one") {
        _setOne(v);
      } else if (k === "key_of_two") {
        _setTwo(v);
      } else if (k === "key_of_three") {
        _setThree(v);
      }
    });
    (0, _solidJs.onCleanup)(() => {
      CustomNetTables.UnsubscribeNetTableListener(id);
    });
  });
  return <Label text={JSON.stringify(one())} />;
}
function Root() {
  const [one, _setOne3] = (0, _solidJs.createSignal)(CustomNetTables.GetTableValue("table_name", "key_of_one"));
  const [two, setTwo] = createSignal("");
  const [one2, _setOne2] = createSignal("");
  (0, _solidJs.createEffect)(() => {
    const id = CustomNetTables.SubscribeNetTableListener("table_name", function (_, k, v) {
      if (k === "key_of_one") {
        _setOne3(v);
      }
    });
    (0, _solidJs.onCleanup)(() => {
      CustomNetTables.UnsubscribeNetTableListener(id);
    });
  });
  return <Label text={JSON.stringify(one())} />;
  function test() {
    return 0;
  }
}"
`;
